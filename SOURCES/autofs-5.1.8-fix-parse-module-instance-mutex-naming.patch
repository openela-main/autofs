autofs-5.1.8 - fix parse module instance mutex naming

From: Ian Kent <raven@themaw.net>

The naming used for parse module instance locks is the same as that
used for map lookup instances. Rename these to make it clear they
are being used in the parse modules.

Signed-off-by: Ian Kent <raven@themaw.net>
---
 CHANGELOG           |    1 +
 modules/parse_amd.c |   28 ++++++++++++++--------------
 modules/parse_sun.c |   20 ++++++++++----------
 3 files changed, 25 insertions(+), 24 deletions(-)

--- autofs-5.1.4.orig/CHANGELOG
+++ autofs-5.1.4/CHANGELOG
@@ -96,6 +96,7 @@
 - fix handling of incorrect return from umount_ent().
 - dont use initgroups() at spawn.
 - fix invalid tsv access.
+- fix parse module instance mutex naming.
 
 xx/xx/2018 autofs-5.1.5
 - fix flag file permission.
--- autofs-5.1.4.orig/modules/parse_amd.c
+++ autofs-5.1.4/modules/parse_amd.c
@@ -39,18 +39,18 @@ int parse_version = AUTOFS_PARSE_VERSION
 
 static struct mount_mod *mount_nfs = NULL;
 static int init_ctr = 0;
-static pthread_mutex_t instance_mutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t parse_instance_mutex = PTHREAD_MUTEX_INITIALIZER;
 
-static void instance_mutex_lock(void)
+static void parse_instance_mutex_lock(void)
 {
-	int status = pthread_mutex_lock(&instance_mutex);
+	int status = pthread_mutex_lock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
 
-static void instance_mutex_unlock(void)
+static void parse_instance_mutex_unlock(void)
 {
-	int status = pthread_mutex_unlock(&instance_mutex);
+	int status = pthread_mutex_unlock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
@@ -112,7 +112,7 @@ int parse_init(int argc, const char *con
 
 	/* We only need this once.  NFS mounts are so common that we cache
 	   this module. */
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (mount_nfs)
 		init_ctr++;
 	else {
@@ -121,11 +121,11 @@ int parse_init(int argc, const char *con
 		} else {
 			kill_context(ctxt);
 			*context = NULL;
-			instance_mutex_unlock();
+			parse_instance_mutex_unlock();
 			return 1;
 		}
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 
 	return 0;
 }
@@ -1358,11 +1358,11 @@ static int do_host_mount(struct autofs_p
 		argc = 1;
 	}
 
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	status = open_lookup("hosts", MODPREFIX, NULL, argc, pargv, &lookup);
 	if (status != NSS_STATUS_SUCCESS) {
 		debug(ap->logopt, "open lookup module hosts failed");
-		instance_mutex_unlock();
+		parse_instance_mutex_unlock();
 		goto out;
 	}
 
@@ -1374,13 +1374,13 @@ static int do_host_mount(struct autofs_p
 		if (!instance) {
 			error(ap->logopt, MODPREFIX
 			     "failed to create source instance for hosts map");
-			instance_mutex_unlock();
+			parse_instance_mutex_unlock();
 			close_lookup(lookup);
 			goto out;
 		}
 	}
 	instance->lookup = lookup;
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 
 	cache_writelock(source->mc);
 	me = cache_lookup_distinct(source->mc, name);
@@ -2373,12 +2373,12 @@ int parse_done(void *context)
 	int rv = 0;
 	struct parse_context *ctxt = (struct parse_context *) context;
 
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (--init_ctr == 0) {
 		rv = close_mount(mount_nfs);
 		mount_nfs = NULL;
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 	if (ctxt)
 		kill_context(ctxt);
 
--- autofs-5.1.4.orig/modules/parse_sun.c
+++ autofs-5.1.4/modules/parse_sun.c
@@ -41,18 +41,18 @@ int parse_version = AUTOFS_PARSE_VERSION
 
 static struct mount_mod *mount_nfs = NULL;
 static int init_ctr = 0;
-static pthread_mutex_t instance_mutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t parse_instance_mutex = PTHREAD_MUTEX_INITIALIZER;
 
-static void instance_mutex_lock(void)
+static void parse_instance_mutex_lock(void)
 {
-	int status = pthread_mutex_lock(&instance_mutex);
+	int status = pthread_mutex_lock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
 
-static void instance_mutex_unlock(void)
+static void parse_instance_mutex_unlock(void)
 {
-	int status = pthread_mutex_unlock(&instance_mutex);
+	int status = pthread_mutex_unlock(&parse_instance_mutex);
 	if (status)
 		fatal(status);
 }
@@ -423,7 +423,7 @@ int parse_init(int argc, const char *con
 
 	/* We only need this once.  NFS mounts are so common that we cache
 	   this module. */
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (mount_nfs)
 		init_ctr++;
 	else {
@@ -431,11 +431,11 @@ int parse_init(int argc, const char *con
 			init_ctr++;
 		} else {
 			kill_context(ctxt);
-			instance_mutex_unlock();
+			parse_instance_mutex_unlock();
 			return 1;
 		}
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 
 	*context = (void *) ctxt;
 
@@ -1719,12 +1719,12 @@ int parse_done(void *context)
 	int rv = 0;
 	struct parse_context *ctxt = (struct parse_context *) context;
 
-	instance_mutex_lock();
+	parse_instance_mutex_lock();
 	if (--init_ctr == 0) {
 		rv = close_mount(mount_nfs);
 		mount_nfs = NULL;
 	}
-	instance_mutex_unlock();
+	parse_instance_mutex_unlock();
 	if (ctxt)
 		kill_context(ctxt);
 
